{"ast":null,"code":"import connectToDatabase from \"../../utils/connectToDatabase\";\nimport checkFieldsValidity from \"../../utils/checkFieldsValidity\";\nimport escape from \"validator/lib/escape\";\nimport bcrypt from \"bcrypt\";\nconst SALT_ROUNDS = 10;\nexport default (async (req, res) => {\n  if (!req.body) return res.status(204).end();\n  const {\n    error,\n    validatedUserData\n  } = validateUserData(req.body);\n  if (error) return res.status(500).json({\n    ok: false,\n    error\n  });\n  validatedUserData.refreshToken = \"\";\n\n  try {\n    validatedUserData.password = await bcrypt.hash(validatedUserData.password, SALT_ROUNDS);\n    const\n    /*{ db, closeConnection }*/\n    what = await connectToDatabase();\n    console.log(what);\n    return res.status(200).json({\n      ok: true\n    });\n    const users = db.collection(\"users\");\n    users.insertOne(validatedUserData, error => {\n      if (error) {\n        console.error(error);\n        closeConnection();\n        return res.status(500).json({\n          ok: false,\n          error: \"A apărut o eroare internă, vă rugăm să ne scuzați.\"\n        });\n      }\n\n      res.status(200).json({\n        ok: true,\n        error: null\n      });\n    });\n  } catch (e) {\n    console.error(e);\n    return res.status(500).json({\n      ok: false,\n      error: \"A apărut o eroare internă, vă rugăm să ne scuzați.\"\n    });\n  }\n});\n\nfunction escapeRegisterData(userData) {\n  for (const [field, value] of Object.entries(userData)) userData[field] = escape(value);\n\n  return userData;\n}\n\nfunction validateUserData(body) {\n  const escapedFields = escapeRegisterData(JSON.parse(body));\n  const errorMessage = checkFieldsValidity({\n    fields: escapedFields,\n    minimumLengthForEachField: {\n      name: 3,\n      surname: 3,\n      username: 5,\n      password: 8\n    },\n    hasEmail: true\n  });\n  if (errorMessage) return {\n    error: errorMessage,\n    validatedUserData: {}\n  };\n  return {\n    error: null,\n    validatedUserData: escapedFields\n  };\n}","map":{"version":3,"sources":["C:/Users/plesa/Desktop/Proiecte Web/infoplus/pages/api/register.js"],"names":["connectToDatabase","checkFieldsValidity","escape","bcrypt","SALT_ROUNDS","req","res","body","status","end","error","validatedUserData","validateUserData","json","ok","refreshToken","password","hash","what","console","log","users","db","collection","insertOne","closeConnection","e","escapeRegisterData","userData","field","value","Object","entries","escapedFields","JSON","parse","errorMessage","fields","minimumLengthForEachField","name","surname","username","hasEmail"],"mappings":"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","sourcesContent":["import connectToDatabase from \"../../utils/connectToDatabase\";\r\nimport checkFieldsValidity from \"../../utils/checkFieldsValidity\";\r\nimport escape from \"validator/lib/escape\";\r\nimport bcrypt from \"bcrypt\";\r\n\r\nconst SALT_ROUNDS = 10;\r\n\r\nexport default async (req, res) => {\r\n    if (!req.body) return res.status(204).end();\r\n\r\n    const { error, validatedUserData } = validateUserData(req.body);\r\n    if (error) return res.status(500).json({ ok: false, error });\r\n    validatedUserData.refreshToken = \"\";\r\n\r\n    try {\r\n        validatedUserData.password = await bcrypt.hash(validatedUserData.password, SALT_ROUNDS);\r\n        const /*{ db, closeConnection }*/ what = await connectToDatabase();\r\n        console.log(what);\r\n        return res.status(200).json({ ok: true });\r\n        const users = db.collection(\"users\");\r\n\r\n        users.insertOne(validatedUserData, (error) => {\r\n            if (error) {\r\n                console.error(error);\r\n                closeConnection();\r\n                return res.status(500).json({\r\n                    ok: false,\r\n                    error: \"A apărut o eroare internă, vă rugăm să ne scuzați.\",\r\n                });\r\n            }\r\n\r\n            res.status(200).json({\r\n                ok: true,\r\n                error: null,\r\n            });\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        return res\r\n            .status(500)\r\n            .json({ ok: false, error: \"A apărut o eroare internă, vă rugăm să ne scuzați.\" });\r\n    }\r\n};\r\n\r\nfunction escapeRegisterData(userData) {\r\n    for (const [field, value] of Object.entries(userData)) userData[field] = escape(value);\r\n\r\n    return userData;\r\n}\r\n\r\nfunction validateUserData(body) {\r\n    const escapedFields = escapeRegisterData(JSON.parse(body));\r\n    const errorMessage = checkFieldsValidity({\r\n        fields: escapedFields,\r\n        minimumLengthForEachField: {\r\n            name: 3,\r\n            surname: 3,\r\n            username: 5,\r\n            password: 8,\r\n        },\r\n        hasEmail: true,\r\n    });\r\n    if (errorMessage) return { error: errorMessage, validatedUserData: {} };\r\n\r\n    return { error: null, validatedUserData: escapedFields };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}