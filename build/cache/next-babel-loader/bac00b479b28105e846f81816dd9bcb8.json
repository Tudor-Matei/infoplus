{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport default function abortableFetch(url, options) {\n  var controller = new AbortController();\n  var signal = controller.signal;\n  return {\n    data: fetch(url, _objectSpread({}, options, {\n      signal: signal\n    }))[\"catch\"](console.error),\n    abort: function abort() {\n      return controller.abort();\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/plesa/Desktop/Proiecte Web/infoplus/utils/abortableFetch.js"],"names":["abortableFetch","url","options","controller","AbortController","signal","data","fetch","console","error","abort"],"mappings":";;;;;;AAAA,eAAe,SAASA,cAAT,CAAwBC,GAAxB,EAA6BC,OAA7B,EAAsC;AACjD,MAAMC,UAAU,GAAG,IAAIC,eAAJ,EAAnB;AADiD,MAEzCC,MAFyC,GAE9BF,UAF8B,CAEzCE,MAFyC;AAIjD,SAAO;AACHC,IAAAA,IAAI,EAAEC,KAAK,CAACN,GAAD,oBAAWC,OAAX;AAAoBG,MAAAA,MAAM,EAANA;AAApB,OAAL,UAAyCG,OAAO,CAACC,KAAjD,CADH;AAEHC,IAAAA,KAAK,EAAE;AAAA,aAAMP,UAAU,CAACO,KAAX,EAAN;AAAA;AAFJ,GAAP;AAIH","sourcesContent":["export default function abortableFetch(url, options) {\r\n    const controller = new AbortController();\r\n    const { signal } = controller;\r\n\r\n    return {\r\n        data: fetch(url, { ...options, signal }).catch(console.error),\r\n        abort: () => controller.abort(),\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}