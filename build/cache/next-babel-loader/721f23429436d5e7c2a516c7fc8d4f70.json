{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport default function abortableFetch(url, options) {\n  const controller = new AbortController();\n  const {\n    signal\n  } = controller;\n  return {\n    data: fetch(url, _objectSpread({}, options, {\n      signal\n    })).catch(console.error),\n    abort: () => controller.abort()\n  };\n}","map":{"version":3,"sources":["C:/Users/plesa/Desktop/Proiecte Web/infoplus/utils/abortableFetch.js"],"names":["abortableFetch","url","options","controller","AbortController","signal","data","fetch","catch","console","error","abort"],"mappings":";;;;;;AAAA,eAAe,SAASA,cAAT,CAAwBC,GAAxB,EAA6BC,OAA7B,EAAsC;AACjD,QAAMC,UAAU,GAAG,IAAIC,eAAJ,EAAnB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAaF,UAAnB;AAEA,SAAO;AACHG,IAAAA,IAAI,EAAEC,KAAK,CAACN,GAAD,oBAAWC,OAAX;AAAoBG,MAAAA;AAApB,OAAL,CAAmCG,KAAnC,CAAyCC,OAAO,CAACC,KAAjD,CADH;AAEHC,IAAAA,KAAK,EAAE,MAAMR,UAAU,CAACQ,KAAX;AAFV,GAAP;AAIH","sourcesContent":["export default function abortableFetch(url, options) {\r\n    const controller = new AbortController();\r\n    const { signal } = controller;\r\n\r\n    return {\r\n        data: fetch(url, { ...options, signal }).catch(console.error),\r\n        abort: () => controller.abort(),\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}