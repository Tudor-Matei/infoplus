{"ast":null,"code":"import jwt from \"jsonwebtoken\";\nimport isEmail from \"validator/lib/isEmail\";\nimport bcrypt from \"bcrypt\";\nimport validateUserData from \"../../utils/validateUserData\";\nimport connectToDatabase from \"../../utils/connectToDatabase\";\nimport bcryptConfig from \"../../configs/bcrypt\";\nexport default (async (req, res) => {\n  if (!req.body) return res.status(204).end();\n  const {\n    error,\n    validatedUserData\n  } = validateUserData(req.body, {\n    minimumLengthForEachField: {\n      username: 5,\n      password: 8\n    },\n    hasEmail: isEmail(JSON.parse(req.body).username)\n  });\n  if (error) return res.status(403).json({\n    ok: false,\n    error\n  });\n  let closeConnection;\n\n  try {\n    validatedUserData.password = await bcrypt.hash(validatedUserData.password, bcryptConfig.saltRounds);\n    const {\n      db,\n      closeConnectionHandler\n    } = await connectToDatabase();\n    closeConnection = closeConnectionHandler;\n    const foundUser = await db.collection(\"users\").findOne({\n      /*password: validatedUserData.password*/\n      username: validatedUserData.username\n    });\n    if (!foundUser) res.status(403).json({\n      ok: false,\n      error: \"Datele pe care le-ați introdus nu au fost corecte.\"\n    });else {\n      console.log(foundUser.password, validatedUserData.password);\n      res.status(200).json({\n        ok: true\n      });\n    }\n    return closeConnection();\n  } catch (e) {\n    if (closeConnection) closeConnection();\n    console.error(e);\n    return res.status(500).json({\n      ok: false\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/plesa/Desktop/Proiecte Web/infoplus/pages/api/login.js"],"names":["jwt","isEmail","bcrypt","validateUserData","connectToDatabase","bcryptConfig","req","res","body","status","end","error","validatedUserData","minimumLengthForEachField","username","password","hasEmail","JSON","parse","json","ok","closeConnection","hash","saltRounds","db","closeConnectionHandler","foundUser","collection","findOne","console","log","e"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,MAAI,CAACD,GAAG,CAACE,IAAT,EAAe,OAAOD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EAAP;AACf,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAA+BT,gBAAgB,CAACG,GAAG,CAACE,IAAL,EAAW;AAC5DK,IAAAA,yBAAyB,EAAE;AACvBC,MAAAA,QAAQ,EAAE,CADa;AAEvBC,MAAAA,QAAQ,EAAE;AAFa,KADiC;AAK5DC,IAAAA,QAAQ,EAAEf,OAAO,CAACgB,IAAI,CAACC,KAAL,CAAWZ,GAAG,CAACE,IAAf,EAAqBM,QAAtB;AAL2C,GAAX,CAArD;AAQA,MAAIH,KAAJ,EAAW,OAAOJ,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AAAEC,IAAAA,EAAE,EAAE,KAAN;AAAaT,IAAAA;AAAb,GAArB,CAAP;AAEX,MAAIU,eAAJ;;AACA,MAAI;AACAT,IAAAA,iBAAiB,CAACG,QAAlB,GAA6B,MAAMb,MAAM,CAACoB,IAAP,CAC/BV,iBAAiB,CAACG,QADa,EAE/BV,YAAY,CAACkB,UAFkB,CAAnC;AAIA,UAAM;AAAEC,MAAAA,EAAF;AAAMC,MAAAA;AAAN,QAAiC,MAAMrB,iBAAiB,EAA9D;AACAiB,IAAAA,eAAe,GAAGI,sBAAlB;AACA,UAAMC,SAAS,GAAG,MAAMF,EAAE,CAACG,UAAH,CAAc,OAAd,EAAuBC,OAAvB,CAA+B;AACnD;AAAyCd,MAAAA,QAAQ,EAAEF,iBAAiB,CAACE;AADlB,KAA/B,CAAxB;AAGA,QAAI,CAACY,SAAL,EACInB,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AACjBC,MAAAA,EAAE,EAAE,KADa;AAEjBT,MAAAA,KAAK,EAAE;AAFU,KAArB,EADJ,KAKK;AACDkB,MAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAS,CAACX,QAAtB,EAAgCH,iBAAiB,CAACG,QAAlD;AACAR,MAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAArB;AACH;AAED,WAAOC,eAAe,EAAtB;AACH,GArBD,CAqBE,OAAOU,CAAP,EAAU;AACR,QAAIV,eAAJ,EAAqBA,eAAe;AAEpCQ,IAAAA,OAAO,CAAClB,KAAR,CAAcoB,CAAd;AACA,WAAOxB,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAArB,CAAP;AACH;AACJ,CAxCD","sourcesContent":["import jwt from \"jsonwebtoken\";\r\nimport isEmail from \"validator/lib/isEmail\";\r\nimport bcrypt from \"bcrypt\";\r\nimport validateUserData from \"../../utils/validateUserData\";\r\nimport connectToDatabase from \"../../utils/connectToDatabase\";\r\nimport bcryptConfig from \"../../configs/bcrypt\";\r\n\r\nexport default async (req, res) => {\r\n    if (!req.body) return res.status(204).end();\r\n    const { error, validatedUserData } = validateUserData(req.body, {\r\n        minimumLengthForEachField: {\r\n            username: 5,\r\n            password: 8,\r\n        },\r\n        hasEmail: isEmail(JSON.parse(req.body).username),\r\n    });\r\n\r\n    if (error) return res.status(403).json({ ok: false, error });\r\n\r\n    let closeConnection;\r\n    try {\r\n        validatedUserData.password = await bcrypt.hash(\r\n            validatedUserData.password,\r\n            bcryptConfig.saltRounds\r\n        );\r\n        const { db, closeConnectionHandler } = await connectToDatabase();\r\n        closeConnection = closeConnectionHandler;\r\n        const foundUser = await db.collection(\"users\").findOne({\r\n            /*password: validatedUserData.password*/ username: validatedUserData.username,\r\n        });\r\n        if (!foundUser)\r\n            res.status(403).json({\r\n                ok: false,\r\n                error: \"Datele pe care le-ați introdus nu au fost corecte.\",\r\n            });\r\n        else {\r\n            console.log(foundUser.password, validatedUserData.password);\r\n            res.status(200).json({ ok: true });\r\n        }\r\n\r\n        return closeConnection();\r\n    } catch (e) {\r\n        if (closeConnection) closeConnection();\r\n\r\n        console.error(e);\r\n        return res.status(500).json({ ok: false });\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}