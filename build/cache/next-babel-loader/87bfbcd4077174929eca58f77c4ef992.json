{"ast":null,"code":"import connectToDatabase from \"../../utils/connectToDatabase\";\nimport checkFieldsValidity from \"../../utils/checkFieldsValidity\";\nimport escape from \"validator/es/lib/escape\";\nimport bcrypt from \"bcrypt\";\nconst SALT_ROUNDS = 10;\nexport default (async (req, res) => {\n  if (!req.body) return res.status(204).end();\n  const {\n    error,\n    validatedUserData\n  } = validateUserData(req.body);\n  if (error) return res.status(500).json({\n    ok: false,\n    error\n  });\n  validatedUserData.refreshToken = \"\";\n\n  try {\n    validatedUserData.password = await bcrypt.hash(validatedUserData.password, SALT_ROUNDS);\n    const {\n      db,\n      closeConnection\n    } = await connectToDatabase();\n    const users = db.collection(\"users\");\n    users.insertOne(validatedUserData, error => {\n      if (error) {\n        console.error(error);\n        closeConnection();\n        return res.status(500).json({\n          ok: false\n        });\n      }\n\n      res.status(200).json({\n        ok: true\n      });\n    });\n  } catch (e) {\n    console.error(e);\n    return res.status(500).json({\n      ok: false\n    });\n  }\n});\n\nfunction escapeRegisterData(userData) {\n  for (const [field, value] of Object.entries(userData)) userData[field] = escape(value);\n\n  return userData;\n}\n\nfunction validateUserData(body) {\n  const escapedFields = escapeRegisterData(JSON.parse(body));\n  const errorMessage = checkFieldsValidity({\n    fields: escapedFields,\n    minimumLengthForEachField: {\n      name: 3,\n      surname: 3,\n      username: 5,\n      password: 8\n    },\n    hasEmail: true\n  });\n  if (errorMessage) return {\n    error: errorMessage,\n    validatedUserData: {}\n  };\n  return {\n    validatedUserData: escapedFields\n  };\n}","map":{"version":3,"sources":["C:/Users/plesa/Desktop/Proiecte Web/infoplus/pages/api/register.js"],"names":["connectToDatabase","checkFieldsValidity","escape","bcrypt","SALT_ROUNDS","req","res","body","status","end","error","validatedUserData","validateUserData","json","ok","refreshToken","password","hash","db","closeConnection","users","collection","insertOne","console","e","escapeRegisterData","userData","field","value","Object","entries","escapedFields","JSON","parse","errorMessage","fields","minimumLengthForEachField","name","surname","username","hasEmail"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,MAAMC,WAAW,GAAG,EAApB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,MAAI,CAACD,GAAG,CAACE,IAAT,EAAe,OAAOD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EAAP;AAEf,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAA+BC,gBAAgB,CAACP,GAAG,CAACE,IAAL,CAArD;AACA,MAAIG,KAAJ,EAAW,OAAOJ,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqB;AAAEC,IAAAA,EAAE,EAAE,KAAN;AAAaJ,IAAAA;AAAb,GAArB,CAAP;AACXC,EAAAA,iBAAiB,CAACI,YAAlB,GAAiC,EAAjC;;AAEA,MAAI;AACAJ,IAAAA,iBAAiB,CAACK,QAAlB,GAA6B,MAAMb,MAAM,CAACc,IAAP,CAAYN,iBAAiB,CAACK,QAA9B,EAAwCZ,WAAxC,CAAnC;AACA,UAAM;AAAEc,MAAAA,EAAF;AAAMC,MAAAA;AAAN,QAA0B,MAAMnB,iBAAiB,EAAvD;AACA,UAAMoB,KAAK,GAAGF,EAAE,CAACG,UAAH,CAAc,OAAd,CAAd;AAEAD,IAAAA,KAAK,CAACE,SAAN,CAAgBX,iBAAhB,EAAoCD,KAAD,IAAW;AAC1C,UAAIA,KAAJ,EAAW;AACPa,QAAAA,OAAO,CAACb,KAAR,CAAcA,KAAd;AACAS,QAAAA,eAAe;AACf,eAAOb,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqB;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAArB,CAAP;AACH;;AAEDR,MAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqB;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAArB;AACH,KARD;AASH,GAdD,CAcE,OAAOU,CAAP,EAAU;AACRD,IAAAA,OAAO,CAACb,KAAR,CAAcc,CAAd;AACA,WAAOlB,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAArB,CAAP;AACH;AACJ,CAzBD;;AA2BA,SAASW,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,OAAK,MAAM,CAACC,KAAD,EAAQC,KAAR,CAAX,IAA6BC,MAAM,CAACC,OAAP,CAAeJ,QAAf,CAA7B,EAAuDA,QAAQ,CAACC,KAAD,CAAR,GAAkBzB,MAAM,CAAC0B,KAAD,CAAxB;;AAEvD,SAAOF,QAAP;AACH;;AAED,SAASd,gBAAT,CAA0BL,IAA1B,EAAgC;AAC5B,QAAMwB,aAAa,GAAGN,kBAAkB,CAACO,IAAI,CAACC,KAAL,CAAW1B,IAAX,CAAD,CAAxC;AACA,QAAM2B,YAAY,GAAGjC,mBAAmB,CAAC;AACrCkC,IAAAA,MAAM,EAAEJ,aAD6B;AAErCK,IAAAA,yBAAyB,EAAE;AACvBC,MAAAA,IAAI,EAAE,CADiB;AAEvBC,MAAAA,OAAO,EAAE,CAFc;AAGvBC,MAAAA,QAAQ,EAAE,CAHa;AAIvBvB,MAAAA,QAAQ,EAAE;AAJa,KAFU;AAQrCwB,IAAAA,QAAQ,EAAE;AAR2B,GAAD,CAAxC;AAUA,MAAIN,YAAJ,EAAkB,OAAO;AAAExB,IAAAA,KAAK,EAAEwB,YAAT;AAAuBvB,IAAAA,iBAAiB,EAAE;AAA1C,GAAP;AAElB,SAAO;AAAEA,IAAAA,iBAAiB,EAAEoB;AAArB,GAAP;AACH","sourcesContent":["import connectToDatabase from \"../../utils/connectToDatabase\";\r\nimport checkFieldsValidity from \"../../utils/checkFieldsValidity\";\r\nimport escape from \"validator/es/lib/escape\";\r\nimport bcrypt from \"bcrypt\";\r\n\r\nconst SALT_ROUNDS = 10;\r\n\r\nexport default async (req, res) => {\r\n    if (!req.body) return res.status(204).end();\r\n\r\n    const { error, validatedUserData } = validateUserData(req.body);\r\n    if (error) return res.status(500).json({ ok: false, error });\r\n    validatedUserData.refreshToken = \"\";\r\n\r\n    try {\r\n        validatedUserData.password = await bcrypt.hash(validatedUserData.password, SALT_ROUNDS);\r\n        const { db, closeConnection } = await connectToDatabase();\r\n        const users = db.collection(\"users\");\r\n\r\n        users.insertOne(validatedUserData, (error) => {\r\n            if (error) {\r\n                console.error(error);\r\n                closeConnection();\r\n                return res.status(500).json({ ok: false });\r\n            }\r\n\r\n            res.status(200).json({ ok: true });\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        return res.status(500).json({ ok: false });\r\n    }\r\n};\r\n\r\nfunction escapeRegisterData(userData) {\r\n    for (const [field, value] of Object.entries(userData)) userData[field] = escape(value);\r\n\r\n    return userData;\r\n}\r\n\r\nfunction validateUserData(body) {\r\n    const escapedFields = escapeRegisterData(JSON.parse(body));\r\n    const errorMessage = checkFieldsValidity({\r\n        fields: escapedFields,\r\n        minimumLengthForEachField: {\r\n            name: 3,\r\n            surname: 3,\r\n            username: 5,\r\n            password: 8,\r\n        },\r\n        hasEmail: true,\r\n    });\r\n    if (errorMessage) return { error: errorMessage, validatedUserData: {} };\r\n\r\n    return { validatedUserData: escapedFields };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}