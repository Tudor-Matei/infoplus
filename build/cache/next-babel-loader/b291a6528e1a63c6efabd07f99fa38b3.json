{"ast":null,"code":"import connectToDatabaseThen from \"../../utils/connectToDatabase\";\nimport checkFieldsValidity from \"../../utils/checkFieldsValidity\";\nimport escape from \"validator/lib/escape\";\nimport jwt from \"jsonwebtoken\";\nexport default ((req, res) => {\n  const {\n    error,\n    validatedUserData\n  } = validateUserData(req.body);\n  if (error) return res.status(403).json({\n    ok: false,\n    error\n  });\n  connectToDatabaseThen(db => {\n    const users = db.collection(\"users\");\n    users.insertOne(validatedUserData, (error, result) => {\n      if (error) {\n        console.error(error);\n        return res.status(500).json({\n          ok: false,\n          error: false,\n          data: {}\n        });\n      }\n\n      console.log(result);\n      res.status(200).json({\n        ok: true,\n        error: false,\n        data: {}\n      });\n    });\n  });\n});\n\nfunction escapeRegisterData(userData) {\n  for (const [key, value] of Object.entries(userData)) userData[key] = escape(value);\n\n  return userData;\n}\n\nfunction validateUserData(body) {\n  const escapedFields = escapeRegisterData(JSON.parse(body));\n  const errorMessage = checkFieldsValidity({\n    fields: escapedFields,\n    minimumLengthForEachField: {\n      name: 3,\n      surname: 3,\n      username: 5,\n      password: 8\n    },\n    hasEmail: true\n  });\n  if (errorMessage) return {\n    error: errorMessage,\n    validatedUserData: {}\n  };\n  return {\n    error: false,\n    validatedUserData: escapedFields\n  };\n}","map":{"version":3,"sources":["C:/Users/plesa/Desktop/Proiecte Web/infoplus/pages/api/register.js"],"names":["connectToDatabaseThen","checkFieldsValidity","escape","jwt","req","res","error","validatedUserData","validateUserData","body","status","json","ok","db","users","collection","insertOne","result","console","data","log","escapeRegisterData","userData","key","value","Object","entries","escapedFields","JSON","parse","errorMessage","fields","minimumLengthForEachField","name","surname","username","password","hasEmail"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,+BAAlC;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,gBAAe,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzB,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAA+BC,gBAAgB,CAACJ,GAAG,CAACK,IAAL,CAArD;AACA,MAAIH,KAAJ,EAAW,OAAOD,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,EAAE,EAAE,KAAN;AAAaN,IAAAA;AAAb,GAArB,CAAP;AAEXN,EAAAA,qBAAqB,CAAEa,EAAD,IAAQ;AAC1B,UAAMC,KAAK,GAAGD,EAAE,CAACE,UAAH,CAAc,OAAd,CAAd;AAEAD,IAAAA,KAAK,CAACE,SAAN,CAAgBT,iBAAhB,EAAmC,CAACD,KAAD,EAAQW,MAAR,KAAmB;AAClD,UAAIX,KAAJ,EAAW;AACPY,QAAAA,OAAO,CAACZ,KAAR,CAAcA,KAAd;AACA,eAAOD,GAAG,CACLK,MADE,CACK,GADL,EAEFC,IAFE,CAEG;AAAEC,UAAAA,EAAE,EAAE,KAAN;AAAaN,UAAAA,KAAK,EAAE,KAApB;AAA2Ba,UAAAA,IAAI,EAAE;AAAjC,SAFH,CAAP;AAGH;;AAEDD,MAAAA,OAAO,CAACE,GAAR,CAAYH,MAAZ;AACAZ,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,EAAE,EAAE,IAAN;AAAYN,QAAAA,KAAK,EAAE,KAAnB;AAA0Ba,QAAAA,IAAI,EAAE;AAAhC,OAArB;AACH,KAVD;AAWH,GAdoB,CAArB;AAeH,CAnBD;;AAqBA,SAASE,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,OAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeJ,QAAf,CAA3B,EACIA,QAAQ,CAACC,GAAD,CAAR,GAAgBrB,MAAM,CAACsB,KAAD,CAAtB;;AAEJ,SAAOF,QAAP;AACH;;AAED,SAASd,gBAAT,CAA0BC,IAA1B,EAAgC;AAC5B,QAAMkB,aAAa,GAAGN,kBAAkB,CAACO,IAAI,CAACC,KAAL,CAAWpB,IAAX,CAAD,CAAxC;AACA,QAAMqB,YAAY,GAAG7B,mBAAmB,CAAC;AACrC8B,IAAAA,MAAM,EAAEJ,aAD6B;AAErCK,IAAAA,yBAAyB,EAAE;AACvBC,MAAAA,IAAI,EAAE,CADiB;AAEvBC,MAAAA,OAAO,EAAE,CAFc;AAGvBC,MAAAA,QAAQ,EAAE,CAHa;AAIvBC,MAAAA,QAAQ,EAAE;AAJa,KAFU;AAQrCC,IAAAA,QAAQ,EAAE;AAR2B,GAAD,CAAxC;AAUA,MAAIP,YAAJ,EAAkB,OAAO;AAAExB,IAAAA,KAAK,EAAEwB,YAAT;AAAuBvB,IAAAA,iBAAiB,EAAE;AAA1C,GAAP;AAElB,SAAO;AAAED,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,iBAAiB,EAAEoB;AAAnC,GAAP;AACH","sourcesContent":["import connectToDatabaseThen from \"../../utils/connectToDatabase\";\r\nimport checkFieldsValidity from \"../../utils/checkFieldsValidity\";\r\nimport escape from \"validator/lib/escape\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nexport default (req, res) => {\r\n    const { error, validatedUserData } = validateUserData(req.body);\r\n    if (error) return res.status(403).json({ ok: false, error });\r\n\r\n    connectToDatabaseThen((db) => {\r\n        const users = db.collection(\"users\");\r\n\r\n        users.insertOne(validatedUserData, (error, result) => {\r\n            if (error) {\r\n                console.error(error);\r\n                return res\r\n                    .status(500)\r\n                    .json({ ok: false, error: false, data: {} });\r\n            }\r\n\r\n            console.log(result);\r\n            res.status(200).json({ ok: true, error: false, data: {} });\r\n        });\r\n    });\r\n};\r\n\r\nfunction escapeRegisterData(userData) {\r\n    for (const [key, value] of Object.entries(userData))\r\n        userData[key] = escape(value);\r\n\r\n    return userData;\r\n}\r\n\r\nfunction validateUserData(body) {\r\n    const escapedFields = escapeRegisterData(JSON.parse(body));\r\n    const errorMessage = checkFieldsValidity({\r\n        fields: escapedFields,\r\n        minimumLengthForEachField: {\r\n            name: 3,\r\n            surname: 3,\r\n            username: 5,\r\n            password: 8,\r\n        },\r\n        hasEmail: true,\r\n    });\r\n    if (errorMessage) return { error: errorMessage, validatedUserData: {} };\r\n\r\n    return { error: false, validatedUserData: escapedFields };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}