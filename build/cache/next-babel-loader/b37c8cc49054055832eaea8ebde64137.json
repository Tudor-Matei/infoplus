{"ast":null,"code":"import connectToDatabaseThen from \"../../utils/connectToDatabase\";\nimport checkFieldsValidity from \"../../utils/checkFieldsValidity\";\nimport escape from \"validator/lib/escape\";\nimport jwt from \"jsonwebtoken\";\nexport default ((req, res) => {\n  const {\n    error,\n    validatedUserData\n  } = validateUserData(req.body);\n  if (error) return res.status(403).json({\n    ok: false,\n    error\n  });\n  connectToDatabaseThen(db => {\n    const users = db.collection(\"users\");\n    users.insertOne(validatedUserData, (error, result) => {\n      if (error) {\n        console.error(error);\n        return res.status(500).json({\n          ok: false,\n          error: false\n        });\n      }\n\n      const userData = {\n        id: result.ops[0]._id,\n        name: validatedUserData.name,\n        surname: validatedUserData.surname,\n        username: validatedUserData.username\n      };\n      const accessToken = jwt.sign(userData, process.env.ACCESS_TOKEN_SECRET, {\n        expiresIn: \"30s\"\n      });\n      res.status(200).json({\n        ok: true,\n        error: false,\n        accessToken\n      });\n    });\n  });\n});\n\nfunction escapeRegisterData(userData) {\n  for (const [key, value] of Object.entries(userData)) userData[key] = escape(value);\n\n  return userData;\n}\n\nfunction validateUserData(body) {\n  const escapedFields = escapeRegisterData(JSON.parse(body));\n  const errorMessage = checkFieldsValidity({\n    fields: escapedFields,\n    minimumLengthForEachField: {\n      name: 3,\n      surname: 3,\n      username: 5,\n      password: 8\n    },\n    hasEmail: true\n  });\n  if (errorMessage) return {\n    error: errorMessage,\n    validatedUserData: {}\n  };\n  return {\n    error: false,\n    validatedUserData: escapedFields\n  };\n}","map":{"version":3,"sources":["C:/Users/plesa/Desktop/Proiecte Web/infoplus/pages/api/register.js"],"names":["connectToDatabaseThen","checkFieldsValidity","escape","jwt","req","res","error","validatedUserData","validateUserData","body","status","json","ok","db","users","collection","insertOne","result","console","userData","id","ops","_id","name","surname","username","accessToken","sign","process","env","ACCESS_TOKEN_SECRET","expiresIn","escapeRegisterData","key","value","Object","entries","escapedFields","JSON","parse","errorMessage","fields","minimumLengthForEachField","password","hasEmail"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,+BAAlC;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,gBAAe,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzB,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAA+BC,gBAAgB,CAACJ,GAAG,CAACK,IAAL,CAArD;AACA,MAAIH,KAAJ,EAAW,OAAOD,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,EAAE,EAAE,KAAN;AAAaN,IAAAA;AAAb,GAArB,CAAP;AAEXN,EAAAA,qBAAqB,CAAEa,EAAD,IAAQ;AAC1B,UAAMC,KAAK,GAAGD,EAAE,CAACE,UAAH,CAAc,OAAd,CAAd;AAEAD,IAAAA,KAAK,CAACE,SAAN,CAAgBT,iBAAhB,EAAmC,CAACD,KAAD,EAAQW,MAAR,KAAmB;AAClD,UAAIX,KAAJ,EAAW;AACPY,QAAAA,OAAO,CAACZ,KAAR,CAAcA,KAAd;AACA,eAAOD,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,EAAE,EAAE,KAAN;AAAaN,UAAAA,KAAK,EAAE;AAApB,SAArB,CAAP;AACH;;AAED,YAAMa,QAAQ,GAAG;AACbC,QAAAA,EAAE,EAAEH,MAAM,CAACI,GAAP,CAAW,CAAX,EAAcC,GADL;AAEbC,QAAAA,IAAI,EAAEhB,iBAAiB,CAACgB,IAFX;AAGbC,QAAAA,OAAO,EAAEjB,iBAAiB,CAACiB,OAHd;AAIbC,QAAAA,QAAQ,EAAElB,iBAAiB,CAACkB;AAJf,OAAjB;AAOA,YAAMC,WAAW,GAAGvB,GAAG,CAACwB,IAAJ,CAChBR,QADgB,EAEhBS,OAAO,CAACC,GAAR,CAAYC,mBAFI,EAGhB;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAHgB,CAApB;AAMA1B,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,EAAE,EAAE,IAAN;AAAYN,QAAAA,KAAK,EAAE,KAAnB;AAA0BoB,QAAAA;AAA1B,OAArB;AACH,KApBD;AAqBH,GAxBoB,CAArB;AAyBH,CA7BD;;AA+BA,SAASM,kBAAT,CAA4Bb,QAA5B,EAAsC;AAClC,OAAK,MAAM,CAACc,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAejB,QAAf,CAA3B,EACIA,QAAQ,CAACc,GAAD,CAAR,GAAgB/B,MAAM,CAACgC,KAAD,CAAtB;;AAEJ,SAAOf,QAAP;AACH;;AAED,SAASX,gBAAT,CAA0BC,IAA1B,EAAgC;AAC5B,QAAM4B,aAAa,GAAGL,kBAAkB,CAACM,IAAI,CAACC,KAAL,CAAW9B,IAAX,CAAD,CAAxC;AACA,QAAM+B,YAAY,GAAGvC,mBAAmB,CAAC;AACrCwC,IAAAA,MAAM,EAAEJ,aAD6B;AAErCK,IAAAA,yBAAyB,EAAE;AACvBnB,MAAAA,IAAI,EAAE,CADiB;AAEvBC,MAAAA,OAAO,EAAE,CAFc;AAGvBC,MAAAA,QAAQ,EAAE,CAHa;AAIvBkB,MAAAA,QAAQ,EAAE;AAJa,KAFU;AAQrCC,IAAAA,QAAQ,EAAE;AAR2B,GAAD,CAAxC;AAUA,MAAIJ,YAAJ,EAAkB,OAAO;AAAElC,IAAAA,KAAK,EAAEkC,YAAT;AAAuBjC,IAAAA,iBAAiB,EAAE;AAA1C,GAAP;AAElB,SAAO;AAAED,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,iBAAiB,EAAE8B;AAAnC,GAAP;AACH","sourcesContent":["import connectToDatabaseThen from \"../../utils/connectToDatabase\";\r\nimport checkFieldsValidity from \"../../utils/checkFieldsValidity\";\r\nimport escape from \"validator/lib/escape\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nexport default (req, res) => {\r\n    const { error, validatedUserData } = validateUserData(req.body);\r\n    if (error) return res.status(403).json({ ok: false, error });\r\n\r\n    connectToDatabaseThen((db) => {\r\n        const users = db.collection(\"users\");\r\n\r\n        users.insertOne(validatedUserData, (error, result) => {\r\n            if (error) {\r\n                console.error(error);\r\n                return res.status(500).json({ ok: false, error: false });\r\n            }\r\n\r\n            const userData = {\r\n                id: result.ops[0]._id,\r\n                name: validatedUserData.name,\r\n                surname: validatedUserData.surname,\r\n                username: validatedUserData.username,\r\n            };\r\n\r\n            const accessToken = jwt.sign(\r\n                userData,\r\n                process.env.ACCESS_TOKEN_SECRET,\r\n                { expiresIn: \"30s\" }\r\n            );\r\n\r\n            res.status(200).json({ ok: true, error: false, accessToken });\r\n        });\r\n    });\r\n};\r\n\r\nfunction escapeRegisterData(userData) {\r\n    for (const [key, value] of Object.entries(userData))\r\n        userData[key] = escape(value);\r\n\r\n    return userData;\r\n}\r\n\r\nfunction validateUserData(body) {\r\n    const escapedFields = escapeRegisterData(JSON.parse(body));\r\n    const errorMessage = checkFieldsValidity({\r\n        fields: escapedFields,\r\n        minimumLengthForEachField: {\r\n            name: 3,\r\n            surname: 3,\r\n            username: 5,\r\n            password: 8,\r\n        },\r\n        hasEmail: true,\r\n    });\r\n    if (errorMessage) return { error: errorMessage, validatedUserData: {} };\r\n\r\n    return { error: false, validatedUserData: escapedFields };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}