{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { createContext, useState } from \"react\";\nimport Router from \"next/router\";\nimport \"../configs/icons\";\nimport Header from \"../components/_globals/Header\";\nimport Contact from \"../components/_globals/Contact\";\nimport Footer from \"../components/_globals/Footer\";\nimport mainStyling from \"../styles/mainStyling\";\nimport useComponentDidMount from \"../components/_hooks/componentDidMount\";\nimport LoadingBar from \"../components/_globals/LoadingBar\";\nconst ThemeContext = createContext(true);\nRouter.events.on(\"routeChangeStart\", loadingStart);\nRouter.events.on(\"routeChangeComplete\", loadingFinished);\nRouter.events.on(\"routeChangeError\", loadingFinished);\nexport default function App({\n  Component,\n  pageProps\n}) {\n  const {\n    0: isLightTheme,\n    1: setTheme\n  } = useState(true);\n  useComponentDidMount(() => {\n    const localTheme = window.localStorage.getItem(\"theme\") || (window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\");\n    setTheme(localTheme === \"light\");\n  });\n  return __jsx(React.Fragment, null, __jsx(LoadingBar, null), __jsx(ThemeContext.Provider, {\n    value: {\n      isLightTheme,\n      setTheme\n    }\n  }, __jsx(Header, null)), __jsx(Component, _extends({}, pageProps, {\n    className: `jsx-${mainStyling.__hash}` + \" \" + (pageProps && pageProps.className != null && pageProps.className || \"\")\n  })), __jsx(Contact, null), __jsx(Footer, null), __jsx(_JSXStyle, {\n    id: mainStyling.__hash\n  }, mainStyling));\n}\nexport { ThemeContext };\n\nfunction loadingStart() {\n  const loadingBar = document.querySelector(\".loading-bar\");\n  loadingBar.classList.add(\"loading-bar--is-loading\");\n}\n\nfunction loadingFinished() {\n  const loadingBar = document.querySelector(\".loading-bar\");\n  if (loadingBar) loadingBar.classList.remove(\"loading-bar--is-loading\");\n}","map":null,"metadata":{},"sourceType":"module"}