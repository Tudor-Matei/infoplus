{"ast":null,"code":"import connectToDatabase from \"../../utils/connectToDatabase\";\nimport validateUserData from \"../../utils/validateUserData\";\nimport bcrypt from \"bcrypt\";\nimport bcryptConfig from \"../../configs/bcrypt\";\nexport default (async (req, res) => {\n  if (!req.body) return res.status(204).end();\n  const {\n    error,\n    validatedUserData\n  } = validateUserData(req.body, {\n    minimumLengthForEachField: {\n      name: 3,\n      surname: 3,\n      username: 5,\n      password: 8\n    },\n    hasEmail: true\n  });\n  if (error) return res.status(403).json({\n    ok: false,\n    error\n  });\n  validatedUserData.refreshToken = \"\";\n  let closeConnection;\n\n  try {\n    validatedUserData.password = await bcrypt.hash(validatedUserData.password, bcryptConfig.saltRounds);\n    const {\n      db,\n      closeConnectionHandler\n    } = await connectToDatabase();\n    closeConnection = closeConnectionHandler;\n    await db.collection(\"users\").insertOne(validatedUserData);\n    res.status(200).json({\n      ok: true\n    });\n    return closeConnection();\n  } catch (e) {\n    if (closeConnection) closeConection();\n    console.error(e);\n    return res.status(500).json({\n      ok: false\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/plesa/Desktop/Proiecte Web/infoplus/pages/api/register.js"],"names":["connectToDatabase","validateUserData","bcrypt","bcryptConfig","req","res","body","status","end","error","validatedUserData","minimumLengthForEachField","name","surname","username","password","hasEmail","json","ok","refreshToken","closeConnection","hash","saltRounds","db","closeConnectionHandler","collection","insertOne","e","closeConection","console"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,MAAI,CAACD,GAAG,CAACE,IAAT,EAAe,OAAOD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EAAP;AACf,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAA+BT,gBAAgB,CAACG,GAAG,CAACE,IAAL,EAAW;AAC5DK,IAAAA,yBAAyB,EAAE;AACvBC,MAAAA,IAAI,EAAE,CADiB;AAEvBC,MAAAA,OAAO,EAAE,CAFc;AAGvBC,MAAAA,QAAQ,EAAE,CAHa;AAIvBC,MAAAA,QAAQ,EAAE;AAJa,KADiC;AAO5DC,IAAAA,QAAQ,EAAE;AAPkD,GAAX,CAArD;AASA,MAAIP,KAAJ,EAAW,OAAOJ,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AAAEC,IAAAA,EAAE,EAAE,KAAN;AAAaT,IAAAA;AAAb,GAArB,CAAP;AACXC,EAAAA,iBAAiB,CAACS,YAAlB,GAAiC,EAAjC;AAEA,MAAIC,eAAJ;;AACA,MAAI;AACAV,IAAAA,iBAAiB,CAACK,QAAlB,GAA6B,MAAMb,MAAM,CAACmB,IAAP,CAC/BX,iBAAiB,CAACK,QADa,EAE/BZ,YAAY,CAACmB,UAFkB,CAAnC;AAKA,UAAM;AAAEC,MAAAA,EAAF;AAAMC,MAAAA;AAAN,QAAiC,MAAMxB,iBAAiB,EAA9D;AACAoB,IAAAA,eAAe,GAAGI,sBAAlB;AACA,UAAMD,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBC,SAAvB,CAAiChB,iBAAjC,CAAN;AAEAL,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAArB;AACA,WAAOE,eAAe,EAAtB;AACH,GAZD,CAYE,OAAOO,CAAP,EAAU;AACR,QAAIP,eAAJ,EAAqBQ,cAAc;AACnCC,IAAAA,OAAO,CAACpB,KAAR,CAAckB,CAAd;AACA,WAAOtB,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAArB,CAAP;AACH;AACJ,CAhCD","sourcesContent":["import connectToDatabase from \"../../utils/connectToDatabase\";\r\nimport validateUserData from \"../../utils/validateUserData\";\r\nimport bcrypt from \"bcrypt\";\r\nimport bcryptConfig from \"../../configs/bcrypt\";\r\n\r\nexport default async (req, res) => {\r\n    if (!req.body) return res.status(204).end();\r\n    const { error, validatedUserData } = validateUserData(req.body, {\r\n        minimumLengthForEachField: {\r\n            name: 3,\r\n            surname: 3,\r\n            username: 5,\r\n            password: 8,\r\n        },\r\n        hasEmail: true,\r\n    });\r\n    if (error) return res.status(403).json({ ok: false, error });\r\n    validatedUserData.refreshToken = \"\";\r\n\r\n    let closeConnection;\r\n    try {\r\n        validatedUserData.password = await bcrypt.hash(\r\n            validatedUserData.password,\r\n            bcryptConfig.saltRounds\r\n        );\r\n\r\n        const { db, closeConnectionHandler } = await connectToDatabase();\r\n        closeConnection = closeConnectionHandler;\r\n        await db.collection(\"users\").insertOne(validatedUserData);\r\n\r\n        res.status(200).json({ ok: true });\r\n        return closeConnection();\r\n    } catch (e) {\r\n        if (closeConnection) closeConection();\r\n        console.error(e);\r\n        return res.status(500).json({ ok: false });\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}